* ultimi 2 utenti che hanno ascoltato le ultime 10 canzoni tra i follower di codep nell' ultima settimana
** titolo album e username dell'utente delle ultime 10 canzoni ascoltate tra i follower
SELECT s.Title, a.Title as AlbumTitle, u.Username
FROM Song s INNER JOIN Album a ON(s.IdAlbum = a.IdAlbum)
			INNER JOIN Heard h ON(h.IdSong = s.IdSong)
			INNER JOIN Follow f ON(f.IdUser = h.IdUser)
			INNER JOIN User u ON(u.IdUser = f.IdUser)
WHERE u.IdUser = 1
AND h.Timestamp BETWEEN ADDDATE(CURDATE(), -7) AND CURDATE()
ORDER BY h.Timestamp LIMIT 10;

** variante riveduta
SELECT s.Title, a.Title as AlbumTitle, u.Username, h.Timestamp
FROM Song s INNER JOIN Album a ON(s.IdAlbum = a.IdAlbum)
			INNER JOIN Heard h ON(h.IdSong = s.IdSong)
			INNER JOIN Follow f ON(f.IdFellow = h.IdUser)
			INNER JOIN User u ON(u.IdUser = f.IdFellow)
WHERE h.Timestamp BETWEEN ADDDATE(CURDATE(), -7) AND CURDATE()
	AND u.IdUser IN (SELECT u.IdUser FROM User u INNER JOIN Follow f ON(f.IdFellow = u.IdUser) WHERE f.IdUser = 1)
	ORDER BY h.Timestamp DESC LIMIT 10;
* username e numero di volte che è stata ascoltata la canzone Mind Heist dai follower dell'user id 1
SELECT COUNT(s.IdSong) AS Conto, u.Username 
FROM Song s INNER JOIN Heard h ON(s.IdSong = h.IdSong) 
            INNER JOIN Follow f ON(h.IdUser = f.IdFellow)
            INNER JOIN User u ON(f.IdFellow = u.IdUser) 
WHERE s.Title = 'Mind Heist' AND f.IdUser = 1 GROUP BY u.Username ORDER BY Conto DESC;
* username, titolo e conto delle canzoni piu ascoltate dai follower dell'user id 1
SELECT u.Username, s.Title, COUNT(s.IdSong) AS Conto 
FROM Song s INNER JOIN Heard h ON(s.IdSong = h.IdSong) 
            INNER JOIN Follow f ON(h.IdUser = f.IdFellow)
            INNER JOIN User u ON(f.IdFellow = u.IdUser) 
WHERE f.IdUser = 1 GROUP BY s.Title ORDER BY Conto DESC;

* username e numero brani nella collezione dell'utente con più canzoni di tipo orchestra
DROP VIEW IF EXISTS ContoBrani;
CREATE VIEW ContoBrani AS
SELECT u.Username, COUNT(b.Genere) as Conteggio
FROM Brani b INNER JOIN BraniCollezione bc ON(b.IdBrano = bc.IdBrano)
             INNER JOIN Collezioni c ON(bc.IdCollezione = c.IdCollezione)
             INNER JOIN Utenti u ON(c.IdUtente = u.IdUtente)
WHERE b.Genere = 'Orchestra' GROUP BY c.IdUtente;
SELECT * FROM ContoBrani HAVING MAX(Conteggio);
* username e totale minuti degli utenti che hanno ascoltato canzoni di un certo genere per un totale di minuti >= tot
SELECT u.Username, CONCAT(FLOOR(SUM(b.Durata) / 60), ":", (SUM(b.Durata) % 60)) AS Minuti
FROM Ascoltate a INNER JOIN Utenti u ON(a.IdUtente = u.IdUtente)
                 INNER JOIN Brani b ON(a.IdBrano = b.IdBrano)
WHERE b.Genere = 'Orchestra' GROUP BY a.IdUtente HAVING Total > 300;
* i 3 utenti che ascoltano più musica orchestra
DROP VIEW IF EXISTS UtentiGenere;
CREATE VIEW UtentiGenere AS
SELECT u.Username, b.Genere, SUM(b.Durata) AS DurataTotale
FROM Ascoltate a INNER JOIN Utenti u ON(a.IdUtente = u.IdUtente)
                 INNER JOIN Brani b ON(a.IdBrano = b.IdBrano)
WHERE b.Genere = 'Orchestra' GROUP BY a.IdUtente ORDER BY DurataTotale DESC;
SELECT * FROM UtentiGenere LIMIT 3;
* trova gli utenti che hanno ascoltato un numero di canzoni sopra la media nell'ultimo mese
DROP VIEW IF EXISTS CanzoniAscoltate;
CREATE VIEW CanzoniAscoltate AS
SELECT u.Username, COUNT(a.IdBrano) as Conto
FROM Ascolte a INNER JOIN Brani b ON(a.IdBrano = b.IdBrano)
               INNER JOIN Utenti u ON(a.IdUtente = u.IdUtente)
WHERE a.Timestamp BETWEEN ADDDATE(CURDATE(), -30) AND NOW()
GROUP BY a.IdUtente;
SELECT ca.* 
FROM CanzoniUtente ca 
WHERE ca.Conto > (SELECT AVG(ce.Conto) FROM CanzoniAscoltate ce) ORDER BY ca.Conto DESC;
* trova gli utenti e il numero di brani per genere nella loro collezione
CREATE VIEW Conteggi AS
SELECT u.Username, b.Genere, COUNT(b.IdBrano) AS Conteggio 
FROM BraniCollezione c INNER JOIN Brani b ON(c.IdBrano = b.IdBrano) 
                       INNER JOIN Collezioni cn ON(c.IdCollezione = cn.IdCollezione)
                       INNER JOIN Utenti u ON(cn.IdUtente = u.IdUtente)
GROUP BY b.Genere, c.IdCollezione;
SELECT Username, Conteggio 
FROM Conteggi
WHERE Genere = 'Country' HAVING Conteggio = (SELECT MAX(Conteggio) FROM Conteggi WHERE Genere = 'Country');
DROP VIEW IF EXISTS Conteggi;
* trova gli utenti con più di 5 brani nella propria collezione che non hanno mai ascoltato una canzone country nell'ultimo mese
SELECT DISTINCT u.Username
FROM Utenti u INNER JOIN Ascoltate a ON(u.IdUtente = a.IdUtente)
WHERE u.IdUtente NOT IN (SELECT DISTINCT u1.IdUtente 
                         FROM Ascoltate a1 INNER JOIN Utenti u1 ON(a1.IdUtente = u1.IdUtente)
                                           INNER JOIN Brani b ON(a1.IdBrano = b.IdBrano)
                         WHERE b.Genere = 'Country')
AND a.Timestamp BETWEEN DATE_SUB(CURDATE(), INTERVAL 30 DAY) AND NOW()
AND u.IdUtente IN (SELECT u2.IdUtente 
                   FROM Utenti u2 INNER JOIN Ascoltate a2 ON(u2.IdUtente = a2.IdUtente)
                   GROUP BY a2.IdUtente 
                   HAVING COUNT(a2.IdBrano) > 5);
